import random
import math
import multiprocessing as mp
import sys

# miller rabin primality test (max 30 iterations for 1/2^30 probability of mistake)
def miller_rabin(n):
    if n==2:
        return True
    if n%2==0:
        return False
    r=0
    u=n-1
    while u%2==0:
        r+=1
        u//=2
    for _ in range(30):
        a=random.randint(1,n-1)
        temp=pow(a,u,n)
        if temp==1 or temp==n-1:
            continue
        counter=0
        for i in range(r-1):
            temp=pow(temp,2,n)
            if temp==n-1:
                break
            counter+=1
        if counter==r-1:
            return False
    return True

# find an n-bit prime number
def find_prime(n):
    low=2**(n-1)
    up=2**n
    while True:
        p=random.randint(low,up)
        if miller_rabin(p):
            return p

# RSA Gen: generate RSA parameters using n as the security parameters
def rsa_gen(n):
    p=find_prime(n//2)
    q=find_prime(n//2)
    N=p*q
    phi=(p-1)*(q-1)
    while True:
        e=random.randint(1,N-1)
        if math.gcd(e,phi)==1:
            break
    d=pow(e,-1,phi)     
    return p,q,N,phi,e,d

# Create RSA parameters

n=2048 #security parameter

# p,q,N,phi,e,d=rsa_gen(n)

p=172967488004265043215634265959021492723011558022383831922967920291422070515075543517484179382280307819920069160740864861940659094861968203350055331668923680432686369783351875578803468198776766498912372620519544976113262045761119069811143482638296897268263600945735130334161208899770331959025719178400625732751
q=107768649318347657924871644675233903541392023570947104553362695957846940496649951637694427928523720204509767584550912562585540453810458337296139597275928585609808543990891615478181143090205976663240398752060625620685180210190060289790574710949347173079681858140138295298116391856906010005382112438334316832551
N=18640472558207144648581628141059751611135131220293108268840910202086168122940843481799618624996588519461702848688352011566234143205951225752555586428447835418080539979950496371703289413974877065958083845656382760671822758211654154555141897888416555120362331834839504128569930089106340912915000936093745813642002253790225388261234636783229863038501225083333849411328286219707858065680762920456653602823342906861136830244805198716894371775860531736743763610470476488844066240985848160861380453742527467404451922527964977953549418580636540538498303960511683685411757029437136209062478359854167364889732346027737743577801
phi=18640472558207144648581628141059751611135131220293108268840910202086168122940843481799618624996588519461702848688352011566234143205951225752555586428447835418080539979950496371703289413974877065958083845656382760671822758211654154555141897888416555120362331834839504128569930089106340912915000936093745813641721517652902775560094130872595607642236821501740518474851955603458589054669037425301474995512538878836706993499513421292368172227188105196097568681525624222801571327211604669804395842453544724242299151155384807356750976324685361178896585766924039615063811570351262783430200759097491022925324514411002801012500
e=10307232694633385473964137500887674077078013620114482957662966233265345151863339953719378624238866375878108396897114227215488861754796749417415095150237241392011734447089652108850140519964095547344560010968857731331649635598147989390532291752448581095522519752762509065543945624750296359544962011213557225398161161531301842207000317514734258457158467029931023902451513810838405291155612247521830686847516218447923337510587907780288182907012871942051745351366070681084704548648515823706764183285986628943332120230434622220431923453852880839689448556057649455433526319436257903428423062242530713525046471312288667625639
d=8023569257398474040077278519998616496106092244595291821784228093310373800588183941489621929929373675593789812922468976440400878495528111400486462431647897108733561829445133270177544338315749580509370794664741954880593976887405737216684529863172489005927603963542624927827085467651194997553983571801375646790406430620665707188355823640587162562446393021795279248308526313337652162388567996372095378614118154654185911771726567970027535526214406439010400182041233014653538602759244568478748543619357087261860767090381990377436002225643133538891513204574029513670257064753839018711430728610129917965215159779907440698259

# Choose message
m=1312131213121312131213121312131213121312131213121312131213121312131213121312131213121312

c=pow(m,e,N)
# print(pow(c,d,N))
# oracle that calculates loc function given a ciphertext c
def oracle(d,N,qq,qa):
    middle=N//2
    while True:
        c=qq.get()
        if c==-1:
            sys.exit(0)
        else:
            m=pow(c,d,N)
            if m>middle:
                qa.put(1)
            else:
                qa.put(0)

def adversary(e,N,c,qq,qa):
    low=0
    high=N-1
    n1=0
    d1=1
    n2=1
    d2=1
    enc_2=pow(2,e,N)
    while True:
        if low==high:
            print(high)
            qq.put(-1)
            sys.exit(0)
        qq.put(c)
        loc=qa.get()
        if loc==0:
            n2=n1*d2+d1*n2
            d2=2*d1*d2
            gcd=math.gcd(n2,d2)
            n2//=gcd
            d2//=gcd
            high=(n2*N)//d2
        else:
            n1=n1*d2+d1*n2
            d1=2*d1*d2
            gcd=math.gcd(n1,d1)
            n1//=gcd
            d1//=gcd
            low=(n1*N)//d1 + 1
            
        c*=enc_2
        c=c%N


if __name__ == '__main__':
    qq=mp.Queue() # queue for queries
    qa=mp.Queue() # queue for answers
    Oracle=mp.Process(target=oracle, args=(d,N,qq,qa,))
    Adversary=mp.Process(target=adversary,args=(e,N,c,qq,qa,))
    Oracle.start()
    Adversary.start()
    Oracle.join()
    Adversary.join()





